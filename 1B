#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int n, m, s, t;

int main() {
    cin >> n >> m >> s >> t;
    vector <long long> d(n, LLONG_MAX);
    d[s - 1] = 0;
    queue <int> q;
    q.push(s - 1);
    vector < vector < pair <int, int> > > edges(n);
    for (int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        edges[a - 1].push_back(make_pair(b - 1, c));
    }
    
    while (q.size() != 0) {
        int v = q.front();
        q.pop();
        for (int i = 0; i < edges[v].size(); i++) {            
            if (d[edges[v][i].first] > d[v] + edges[v][i].second) {             
                d[edges[v][i].first] = d[v] + edges[v][i].second;             
                q.push(edges[v][i].first);
            }
        }
    }
    
    if (d[t - 1] == LLONG_MAX) {
        cout << "Unreachable";
    }
    else {
        cout << d[t - 1];
    }
    
    return 0;
}
